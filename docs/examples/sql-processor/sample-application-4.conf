# SimpleSqlProcessor Example
#
# Apply the SimpleSqlProcessor to two files, using an external query
#
SimpleSqlProcessor: {
  # Input configuration: tables descriptions, variables and the query to be ran
  input: {
    # It contains a map of table names that need to be associated with the files
    # Please keep in mind that for local resources the path needs to be relative to the sql-processor.sh script file
    tables {
      "table1": {
        path: "resources/file1.json"
        format: "json"
      }
      "table2": {
        path: "resources/file2.csv"
        format: "csv"
        schema: {
          "type" : "struct",
          "fields" : [ {
            "name" : "id",
            "type" : "string",
            "nullable" : true,
            "metadata" : { }
          }, {
            "name" : "timestamp",
            "type" : "string",
            "nullable" : true,
            "metadata" : { }
          }, {
            "name" : "address",
            "type" : "string",
            "nullable" : true,
            "metadata" : { }
          } ]
        }
      }
    }
    variables {
      columns: "table1.id, table1.order, table2.address"
    }
    # The query file that will be applied on the input tables
    sql.path: "sample-sql-4.sql"
  }
  output: {
    # The path where the results will be saved
    path: "out-example-4"
    # The format of the output file; acceptable values are "json", "avro", "json" and "parquet"
    format: "json"
    # Output mode: append, overwrite,...
    mode: "overwrite"
    # The output partition columns
    # partition.columns: ["id"]
  }
}
