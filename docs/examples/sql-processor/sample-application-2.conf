# SimpleSqlProcessor Example
#
# Apply the SimpleSqlProcessor to a single file using a more complex input parsing setup
#
SimpleSqlProcessor: {

  # It contains a map of table names that need to be associated with the files
  # Please keep in mind that for local resources the path needs to be relative to the sql-processor.sh script file
  inputTables {
    "table1": {
      path: "/resources/file2.csv"
      format: "csv"
      schema: {
        "type" : "struct",
        "fields" : [ {
          "name" : "id",
          "type" : "string",
          "nullable" : true,
          "metadata" : { }
        }, {
          "name" : "timestamp",
          "type" : "string",
          "nullable" : true,
          "metadata" : { }
        }, {
          "name" : "address",
          "type" : "string",
          "nullable" : true,
          "metadata" : { }
        } ]
      }
    }
  }
  sql: {
    variables {
      columns: "*"
      filter_id: "1001"
    }
    # The query that will be applied on the input tables
    # The query must be written on a single line.
    # All quotes must be escaped.
    line: "SELECT * FROM table1 "
  }
  output: {
    # The path where the results will be saved
    path: "/out/out-example-2"
    # The format of the output file; acceptable values are "json", "avro", "json" and "parquet"
    format: "json"
    # Output mode: append, overwrite,...
    mode: "overwrite"
    # The output partition columns
    partition.columns: ["id"]
  }
}
