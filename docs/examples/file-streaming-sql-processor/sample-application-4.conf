# SimpleFileStreamingSqlProcessor Example
#
# Apply the SimpleFileStreamingSqlProcessor to two files, using an external query
#
SimpleFileStreamingSqlProcessor: {
  # Input configuration: tables descriptions, variables and the query to be ran
  input: {
    # It contains a map of table names that need to be associated with the files
    # Please keep in mind that for local resources the path needs to be relative to the sql-processor.sh script file
    tables {
      "table1": {
        path: "/out/in-example-4-1"
        format: "json"
        schema.path: "resources/file1.schema"
      }
      "table2": {
        path: "/out/in-example-4-2"
        format: "csv"
        schema.path: "resources/file2.schema"
      }
    }
    variables {
      columns: "table1.id, table1.order, table2.address"
      filter_id: ${my-filter-id}
    }
    # The query file that will be applied on the input tables
    sql.path: "sample-sql-4.sql"
  }
  output: {
    # The format of the output file; acceptable values are "json", "avro", "json" and "parquet"
    format: "json"
    # The path where the results will be saved
    path: "/out/out-example-4"
    checkpointLocation: "/out/checkpoints/out-example-4-cp"
    outputMode: append
    trigger {
      # once, continuous or processing-time
      type: processing-time
      interval: 2s
    }
    # The output partition columns
    # partition.columns: ["id"]
  }
}
